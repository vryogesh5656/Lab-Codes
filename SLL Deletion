#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node *next;
};

// Traversing a linked list
void traversal(struct node *ptr){
    while(ptr != NULL){
        printf("%d ", ptr->data);
        ptr = ptr->next;
    }
}

// Case 1: Deleting the first node of the linked list
struct node *deleteFirst(struct node *head){
    struct node *ptr = head;
    head = head->next;
    free(ptr);
    return head;
}

// Case 2: Deleting the index node of the linked list  
struct node *deleteAtIndex(struct node *head, int index){
    struct node *p = head;
    struct node *q = head->next;
    for(int i=0; i<index-1; i++){
        p = p->next;
        q = q->next;
    }
    p->next = q->next;
    free(q);
    return head;
}

// Case 3: Deleting the last node of the linked list
struct node *deleteAtLast(struct node *head){
    struct node *p = head;
    struct node *q = head->next;
    while(q->next != NULL){
        p = p->next;
        q = q->next;
    }
    p->next = NULL;
    free(q);
    return head;
}

// Case 4: Deleting the given node
struct node *deleteAtValue(struct node *head, int value){
    struct node *p = head;
    struct node *q = head->next;
    while(q->data != value && q->next != NULL){
        p = p->next;
        q = q->next;
    }
    
    if(q->data == value){
        p->next = q->next;
        free(q);
    }
    return head;
}

int main(){
    struct node *head;
    struct node *second;
    struct node *third;
    struct node *fourth;

    head = (struct node*)malloc(sizeof(struct node));
    second = (struct node*)malloc(sizeof(struct node));
    third = (struct node*)malloc(sizeof(struct node));
    fourth = (struct node*)malloc(sizeof(struct node));

    head->data = 4;
    head->next = second;

    second->data = 3;
    second->next = third;

    third->data = 8;
    third->next = fourth;

    fourth->data = 1;
    fourth->next = NULL;

    printf("Linked list before deletion is: ");
    traversal(head);
    
    head = deleteFirst(head); // for deleting the first element of the linked list
    head = deleteAtIndex(head, 2); // for deleting the element st the given index
    head = deleteAtLast(head); // for deleting the last element of the linked list
    head = deleteAtValue(head, 8); // for deleting the element at the given node of the linked list
    printf("\nLinked list after deletion is: ");
    traversal(head);
    return 0;
}
