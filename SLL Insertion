#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node *next;
};

void LinkedListTraversal(struct node *ptr){
    while (ptr != NULL){
        printf("%d ", ptr->data);
        ptr = ptr->next;
    }
}

// Case 1
struct node * insertAtFirst(struct node *head, int data){
    struct node *ptr = (struct node *)malloc(sizeof(struct node));
    ptr->next = head;
    ptr ->data = data;
    head = ptr;
    return head;
}

// Case 2
struct node * insertAtIndex(struct node *head, int data, int index){
    struct node *ptr = (struct node *)malloc(sizeof(struct node));
    struct node *p = head;
    int i = 0;

    while(i!=index-1){
        p = p->next;
        i++;
    }    
    ptr->data = data;
    ptr->next = p->next;
    p->next = ptr;
    return head;
}

// Case 3
struct node * insertAtEnd(struct node *head, int data){
    struct node *ptr = (struct node *)malloc(sizeof(struct node));
    struct node *p = head;
    ptr->data = data;

    while(p->next != NULL){
        p = p->next;
    }
    p->next = ptr;
    ptr->next = NULL;
    return head;
}

// Case 4
struct node * insertAfterNode(struct node *head, struct node *q, int data){
    struct node *ptr = (struct node *)malloc(sizeof(struct node));
    ptr->data = data;

    ptr->next = q->next;
    q->next = ptr;
    return head;
}

int main(){
    struct node *head;
    struct node *second;
    struct node *third;
    struct node *fourth;

    // Allocate the memory for nodes in heap
    head = (struct node *)malloc(sizeof(struct node));
    second = (struct node *)malloc(sizeof(struct node));
    third = (struct node *)malloc(sizeof(struct node));
    fourth = (struct node *)malloc(sizeof(struct node));

    // Link first and second nodes
    head->data = 7;
    head->next = second;

    // Link second and third nodes
    second->data = 11;
    second->next = third;

    // Link third and fourth nodes
    third->data = 41;
    third->next = fourth;

    // Terminate the list at the fourth node
    fourth->data = 66;
    fourth->next = NULL;

    printf("The linked list is: \n");
    LinkedListTraversal(head);

    head = insertAtFirst(head, 56);
    head = insertAtIndex(head, 55, 2);
    head = insertAtEnd(head, 57);
    head = insertAfterNode(head, third, 20);

    printf("\nThe linked list with a new element is: \n");
    LinkedListTraversal(head);
    return 0;
}
